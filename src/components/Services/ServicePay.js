import React, { useState, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import "./ServicePay.css";

const API_URL = process.env.REACT_APP_API_URL || "https://mamacare-backend.vercel.app";

const pricingData = [
  { title: "G√≥i L·∫ª", price: "300,000 VND" },
  { title: "G√≥i C∆° B·∫£n: ‚ÄúM·∫π Tr√≤n Con Vu√¥ng‚Äù", price: "2,000,000 VND" },
  { title: "G√≥i N√¢ng Cao: ‚ÄúH·ªìi Ph·ª•c To√†n Di·ªán‚Äù", price: "4,000,000 VND" },
  { title: "G√≥i Cao C·∫•p: ‚ÄúChƒÉm S√≥c V√†ng‚Äù", price: "6,000,000 VND" },
];

const ServicePay = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { name, email, phone, message, servicePackage } = location.state || {};

  const [isPaymentConfirmed, setIsPaymentConfirmed] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  // üî• N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, quay v·ªÅ trang ƒë·∫∑t d·ªãch v·ª•
  useEffect(() => {
    if (!name || !email) {
      navigate("/service");
    }
  }, [name, email, navigate]);

  const selectedPackage = pricingData.find(pkg => pkg.title === servicePackage);
  const price = selectedPackage ? selectedPackage.price : "Kh√¥ng c√≥ gi√°";

  const handleConfirmPayment = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch(`${API_URL}/send-payment-email`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name,
          email,
          phone,
          message: message || "Kh√¥ng c√≥ l·ªùi nh·∫Øn",
          servicesUse: selectedPackage.title,
        }),
      });

      const result = await response.json();
      if (!response.ok) throw new Error(result.message);
      console.log("‚úÖ Email sent!");
      setIsPaymentConfirmed(true);
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i email:", error);
      setError("Kh√¥ng th·ªÉ g·ª≠i email. H√£y th·ª≠ l·∫°i sau.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="servicepay-container">
      {isPaymentConfirmed ? (
        <div className="thank-you-message">
          <h2>C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•</h2>
          <p>Ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i s·ªõm nh·∫•t ƒë·ªÉ x√°c nh·∫≠n v√† ph·ª•c v·ª• qu√Ω kh√°ch.</p>
        </div>
      ) : (
        <div className="servicepay-card">
          <h2 className="servicepay-title">X√°c nh·∫≠n d·ªãch v·ª•</h2>
          <div className="servicepay-info">
            <p><strong>H·ªç v√† t√™n:</strong> {name}</p>
            <p><strong>Email:</strong> {email}</p>
            <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {phone}</p>
            <p><strong>L·ªùi nh·∫Øn:</strong> {message || "Kh√¥ng c√≥ l·ªùi nh·∫Øn"}</p>
            <p><strong>G√≥i d·ªãch v·ª•:</strong> {servicePackage}</p>
          </div>

          <div className="servicepay-total">
            <h3>T·ªïng h√≥a ƒë∆°n:</h3>
            <p>{price}</p>
          </div>

          <div className="servicepay-qrcode">
            <img src="/assets/qr.jpg" alt="QR code" />
          </div>

          {error && <p className="error-message">{error}</p>}

          <button
            onClick={handleConfirmPayment}
            className="servicepay-confirm-button"
            disabled={isLoading}
          >
            {isLoading ? "ƒêang x·ª≠ l√Ω..." : "X√°c nh·∫≠n & Thanh to√°n"}
          </button>
        </div>
      )}
    </div>
  );
};

export default ServicePay;
